/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace MetaWorkspaceNFT {
  export type NFTContentStruct = {
    ipfsHash: string;
    contentType: BigNumberish;
    roomId: string;
    creator: AddressLike;
    duration: BigNumberish;
    participants: string[];
    metadata: string;
    timestamp: BigNumberish;
    isPrivate: boolean;
    whitelistedUsers: string[];
  };

  export type NFTContentStructOutput = [
    ipfsHash: string,
    contentType: bigint,
    roomId: string,
    creator: string,
    duration: bigint,
    participants: string[],
    metadata: string,
    timestamp: bigint,
    isPrivate: boolean,
    whitelistedUsers: string[]
  ] & {
    ipfsHash: string;
    contentType: bigint;
    roomId: string;
    creator: string;
    duration: bigint;
    participants: string[];
    metadata: string;
    timestamp: bigint;
    isPrivate: boolean;
    whitelistedUsers: string[];
  };
}

export interface MetaWorkspaceNFTInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addToWhitelist"
      | "aiAccessPrice"
      | "approve"
      | "balanceOf"
      | "checkAIAccess"
      | "createRoom"
      | "getApproved"
      | "getContent"
      | "getRoomContent"
      | "getRoomMemberCount"
      | "getRoomMembers"
      | "grantAIAccess"
      | "hasAIAccess"
      | "hasAccess"
      | "isApprovedForAll"
      | "isRoomMember"
      | "isUserWhitelisted"
      | "joinRoom"
      | "mintVideoNFT"
      | "mintVoiceNFT"
      | "name"
      | "owner"
      | "ownerOf"
      | "purchaseAIAccess"
      | "renounceOwnership"
      | "revokeAIAccess"
      | "roomCreator"
      | "roomEarnings"
      | "roomExists"
      | "roomJoinPrice"
      | "roomMembers"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setAIAccessPrice"
      | "setApprovalForAll"
      | "setRoomJoinPrice"
      | "supportsInterface"
      | "symbol"
      | "tokenByIndex"
      | "tokenOfOwnerByIndex"
      | "tokenURI"
      | "totalSupply"
      | "transferFrom"
      | "transferOwnership"
      | "updateNFTMetadata"
      | "updateRoom"
      | "withdraw"
      | "withdrawRoomEarnings"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AIAccessGranted"
      | "AIAccessPriceUpdated"
      | "AIAccessRevoked"
      | "AccessGranted"
      | "Approval"
      | "ApprovalForAll"
      | "CreatorEarningsWithdrawn"
      | "NFTMinted"
      | "OwnershipTransferred"
      | "RoomActivity"
      | "RoomCreated"
      | "RoomJoinPriceUpdated"
      | "RoomJoined"
      | "RoomUpdated"
      | "Transfer"
      | "VideoNFTCreated"
      | "VoiceNFTCreated"
      | "WithdrawalMade"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addToWhitelist",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "aiAccessPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkAIAccess",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createRoom",
    values: [string, string, string[], boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getContent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoomContent",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoomMemberCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoomMembers",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantAIAccess",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAIAccess",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAccess",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isRoomMember",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isUserWhitelisted",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "joinRoom", values: [string]): string;
  encodeFunctionData(
    functionFragment: "mintVideoNFT",
    values: [
      AddressLike,
      string,
      BigNumberish,
      string,
      string[],
      string,
      string[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintVoiceNFT",
    values: [AddressLike, string, BigNumberish, string, string[], string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseAIAccess",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAIAccess",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "roomCreator", values: [string]): string;
  encodeFunctionData(
    functionFragment: "roomEarnings",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "roomExists", values: [string]): string;
  encodeFunctionData(
    functionFragment: "roomJoinPrice",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "roomMembers",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAIAccessPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoomJoinPrice",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateNFTMetadata",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRoom",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawRoomEarnings",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addToWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aiAccessPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkAIAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createRoom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getContent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoomContent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoomMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoomMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantAIAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasAIAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasAccess", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRoomMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUserWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joinRoom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintVideoNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintVoiceNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purchaseAIAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAIAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "roomCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "roomEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roomExists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "roomJoinPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "roomMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAIAccessPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoomJoinPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateNFTMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateRoom", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRoomEarnings",
    data: BytesLike
  ): Result;
}

export namespace AIAccessGrantedEvent {
  export type InputTuple = [
    user: AddressLike,
    payment: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [user: string, payment: bigint, timestamp: bigint];
  export interface OutputObject {
    user: string;
    payment: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AIAccessPriceUpdatedEvent {
  export type InputTuple = [
    oldPrice: BigNumberish,
    newPrice: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    oldPrice: bigint,
    newPrice: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    oldPrice: bigint;
    newPrice: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AIAccessRevokedEvent {
  export type InputTuple = [
    user: AddressLike,
    revokedBy: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    revokedBy: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    user: string;
    revokedBy: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AccessGrantedEvent {
  export type InputTuple = [
    user: AddressLike,
    roomId: string,
    username: string
  ];
  export type OutputTuple = [user: string, roomId: string, username: string];
  export interface OutputObject {
    user: string;
    roomId: string;
    username: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreatorEarningsWithdrawnEvent {
  export type InputTuple = [
    creator: AddressLike,
    roomId: string,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    creator: string,
    roomId: string,
    amount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    creator: string;
    roomId: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NFTMintedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    creator: AddressLike,
    roomId: string,
    contentType: BigNumberish,
    ipfsHash: string
  ];
  export type OutputTuple = [
    tokenId: bigint,
    creator: string,
    roomId: string,
    contentType: bigint,
    ipfsHash: string
  ];
  export interface OutputObject {
    tokenId: bigint;
    creator: string;
    roomId: string;
    contentType: bigint;
    ipfsHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoomActivityEvent {
  export type InputTuple = [
    roomId: string,
    activityType: string,
    user: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    roomId: string,
    activityType: string,
    user: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    roomId: string;
    activityType: string;
    user: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoomCreatedEvent {
  export type InputTuple = [
    roomId: string,
    name: string,
    isPublic: boolean,
    creator: AddressLike
  ];
  export type OutputTuple = [
    roomId: string,
    name: string,
    isPublic: boolean,
    creator: string
  ];
  export interface OutputObject {
    roomId: string;
    name: string;
    isPublic: boolean;
    creator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoomJoinPriceUpdatedEvent {
  export type InputTuple = [
    roomId: string,
    oldPrice: BigNumberish,
    newPrice: BigNumberish,
    updatedBy: AddressLike
  ];
  export type OutputTuple = [
    roomId: string,
    oldPrice: bigint,
    newPrice: bigint,
    updatedBy: string
  ];
  export interface OutputObject {
    roomId: string;
    oldPrice: bigint;
    newPrice: bigint;
    updatedBy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoomJoinedEvent {
  export type InputTuple = [
    user: AddressLike,
    roomId: string,
    fee: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    roomId: string,
    fee: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    user: string;
    roomId: string;
    fee: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoomUpdatedEvent {
  export type InputTuple = [
    roomId: string,
    newName: string,
    isPublic: boolean,
    updatedBy: AddressLike
  ];
  export type OutputTuple = [
    roomId: string,
    newName: string,
    isPublic: boolean,
    updatedBy: string
  ];
  export interface OutputObject {
    roomId: string;
    newName: string;
    isPublic: boolean;
    updatedBy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VideoNFTCreatedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    roomId: string,
    ipfsHash: string,
    duration: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    roomId: string,
    ipfsHash: string,
    duration: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    roomId: string;
    ipfsHash: string;
    duration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoiceNFTCreatedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    roomId: string,
    ipfsHash: string,
    duration: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    roomId: string,
    ipfsHash: string,
    duration: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    roomId: string;
    ipfsHash: string;
    duration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalMadeEvent {
  export type InputTuple = [
    to: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [to: string, amount: bigint, timestamp: bigint];
  export interface OutputObject {
    to: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MetaWorkspaceNFT extends BaseContract {
  connect(runner?: ContractRunner | null): MetaWorkspaceNFT;
  waitForDeployment(): Promise<this>;

  interface: MetaWorkspaceNFTInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addToWhitelist: TypedContractMethod<
    [roomId: string, username: string],
    [void],
    "nonpayable"
  >;

  aiAccessPrice: TypedContractMethod<[], [bigint], "view">;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  checkAIAccess: TypedContractMethod<[user: AddressLike], [boolean], "view">;

  createRoom: TypedContractMethod<
    [
      roomId: string,
      name: string,
      farcasterWhitelist: string[],
      isPublic: boolean,
      joinPrice: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getContent: TypedContractMethod<
    [tokenId: BigNumberish],
    [MetaWorkspaceNFT.NFTContentStructOutput],
    "view"
  >;

  getRoomContent: TypedContractMethod<[roomId: string], [bigint[]], "view">;

  getRoomMemberCount: TypedContractMethod<[roomId: string], [bigint], "view">;

  getRoomMembers: TypedContractMethod<[roomId: string], [string[]], "view">;

  grantAIAccess: TypedContractMethod<[user: AddressLike], [void], "nonpayable">;

  hasAIAccess: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  hasAccess: TypedContractMethod<
    [tokenId: BigNumberish, username: string],
    [boolean],
    "view"
  >;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  isRoomMember: TypedContractMethod<
    [roomId: string, user: AddressLike],
    [boolean],
    "view"
  >;

  isUserWhitelisted: TypedContractMethod<
    [roomId: string, username: string],
    [boolean],
    "view"
  >;

  joinRoom: TypedContractMethod<[roomId: string], [void], "payable">;

  mintVideoNFT: TypedContractMethod<
    [
      to: AddressLike,
      ipfsHash: string,
      duration: BigNumberish,
      roomId: string,
      participants: string[],
      summary: string,
      whitelistedUsers: string[]
    ],
    [bigint],
    "nonpayable"
  >;

  mintVoiceNFT: TypedContractMethod<
    [
      to: AddressLike,
      ipfsHash: string,
      duration: BigNumberish,
      roomId: string,
      whitelistedUsers: string[],
      transcription: string
    ],
    [bigint],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  purchaseAIAccess: TypedContractMethod<[], [void], "payable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  revokeAIAccess: TypedContractMethod<
    [user: AddressLike],
    [void],
    "nonpayable"
  >;

  roomCreator: TypedContractMethod<[arg0: string], [string], "view">;

  roomEarnings: TypedContractMethod<[arg0: string], [bigint], "view">;

  roomExists: TypedContractMethod<[roomId: string], [boolean], "view">;

  roomJoinPrice: TypedContractMethod<[arg0: string], [bigint], "view">;

  roomMembers: TypedContractMethod<
    [arg0: string, arg1: BigNumberish],
    [string],
    "view"
  >;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setAIAccessPrice: TypedContractMethod<
    [newPrice: BigNumberish],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setRoomJoinPrice: TypedContractMethod<
    [roomId: string, newPrice: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenByIndex: TypedContractMethod<[index: BigNumberish], [bigint], "view">;

  tokenOfOwnerByIndex: TypedContractMethod<
    [owner: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateNFTMetadata: TypedContractMethod<
    [tokenId: BigNumberish, newMetadata: string],
    [void],
    "nonpayable"
  >;

  updateRoom: TypedContractMethod<
    [roomId: string, newName: string, isPublic: boolean],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  withdrawRoomEarnings: TypedContractMethod<
    [roomId: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addToWhitelist"
  ): TypedContractMethod<
    [roomId: string, username: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "aiAccessPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "checkAIAccess"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "createRoom"
  ): TypedContractMethod<
    [
      roomId: string,
      name: string,
      farcasterWhitelist: string[],
      isPublic: boolean,
      joinPrice: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getContent"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [MetaWorkspaceNFT.NFTContentStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoomContent"
  ): TypedContractMethod<[roomId: string], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getRoomMemberCount"
  ): TypedContractMethod<[roomId: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoomMembers"
  ): TypedContractMethod<[roomId: string], [string[]], "view">;
  getFunction(
    nameOrSignature: "grantAIAccess"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "hasAIAccess"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasAccess"
  ): TypedContractMethod<
    [tokenId: BigNumberish, username: string],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isRoomMember"
  ): TypedContractMethod<
    [roomId: string, user: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isUserWhitelisted"
  ): TypedContractMethod<[roomId: string, username: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "joinRoom"
  ): TypedContractMethod<[roomId: string], [void], "payable">;
  getFunction(
    nameOrSignature: "mintVideoNFT"
  ): TypedContractMethod<
    [
      to: AddressLike,
      ipfsHash: string,
      duration: BigNumberish,
      roomId: string,
      participants: string[],
      summary: string,
      whitelistedUsers: string[]
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintVoiceNFT"
  ): TypedContractMethod<
    [
      to: AddressLike,
      ipfsHash: string,
      duration: BigNumberish,
      roomId: string,
      whitelistedUsers: string[],
      transcription: string
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "purchaseAIAccess"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeAIAccess"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "roomCreator"
  ): TypedContractMethod<[arg0: string], [string], "view">;
  getFunction(
    nameOrSignature: "roomEarnings"
  ): TypedContractMethod<[arg0: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "roomExists"
  ): TypedContractMethod<[roomId: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "roomJoinPrice"
  ): TypedContractMethod<[arg0: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "roomMembers"
  ): TypedContractMethod<[arg0: string, arg1: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAIAccessPrice"
  ): TypedContractMethod<[newPrice: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRoomJoinPrice"
  ): TypedContractMethod<
    [roomId: string, newPrice: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenByIndex"
  ): TypedContractMethod<[index: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenOfOwnerByIndex"
  ): TypedContractMethod<
    [owner: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateNFTMetadata"
  ): TypedContractMethod<
    [tokenId: BigNumberish, newMetadata: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateRoom"
  ): TypedContractMethod<
    [roomId: string, newName: string, isPublic: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawRoomEarnings"
  ): TypedContractMethod<[roomId: string], [void], "nonpayable">;

  getEvent(
    key: "AIAccessGranted"
  ): TypedContractEvent<
    AIAccessGrantedEvent.InputTuple,
    AIAccessGrantedEvent.OutputTuple,
    AIAccessGrantedEvent.OutputObject
  >;
  getEvent(
    key: "AIAccessPriceUpdated"
  ): TypedContractEvent<
    AIAccessPriceUpdatedEvent.InputTuple,
    AIAccessPriceUpdatedEvent.OutputTuple,
    AIAccessPriceUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "AIAccessRevoked"
  ): TypedContractEvent<
    AIAccessRevokedEvent.InputTuple,
    AIAccessRevokedEvent.OutputTuple,
    AIAccessRevokedEvent.OutputObject
  >;
  getEvent(
    key: "AccessGranted"
  ): TypedContractEvent<
    AccessGrantedEvent.InputTuple,
    AccessGrantedEvent.OutputTuple,
    AccessGrantedEvent.OutputObject
  >;
  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "CreatorEarningsWithdrawn"
  ): TypedContractEvent<
    CreatorEarningsWithdrawnEvent.InputTuple,
    CreatorEarningsWithdrawnEvent.OutputTuple,
    CreatorEarningsWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "NFTMinted"
  ): TypedContractEvent<
    NFTMintedEvent.InputTuple,
    NFTMintedEvent.OutputTuple,
    NFTMintedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RoomActivity"
  ): TypedContractEvent<
    RoomActivityEvent.InputTuple,
    RoomActivityEvent.OutputTuple,
    RoomActivityEvent.OutputObject
  >;
  getEvent(
    key: "RoomCreated"
  ): TypedContractEvent<
    RoomCreatedEvent.InputTuple,
    RoomCreatedEvent.OutputTuple,
    RoomCreatedEvent.OutputObject
  >;
  getEvent(
    key: "RoomJoinPriceUpdated"
  ): TypedContractEvent<
    RoomJoinPriceUpdatedEvent.InputTuple,
    RoomJoinPriceUpdatedEvent.OutputTuple,
    RoomJoinPriceUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RoomJoined"
  ): TypedContractEvent<
    RoomJoinedEvent.InputTuple,
    RoomJoinedEvent.OutputTuple,
    RoomJoinedEvent.OutputObject
  >;
  getEvent(
    key: "RoomUpdated"
  ): TypedContractEvent<
    RoomUpdatedEvent.InputTuple,
    RoomUpdatedEvent.OutputTuple,
    RoomUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "VideoNFTCreated"
  ): TypedContractEvent<
    VideoNFTCreatedEvent.InputTuple,
    VideoNFTCreatedEvent.OutputTuple,
    VideoNFTCreatedEvent.OutputObject
  >;
  getEvent(
    key: "VoiceNFTCreated"
  ): TypedContractEvent<
    VoiceNFTCreatedEvent.InputTuple,
    VoiceNFTCreatedEvent.OutputTuple,
    VoiceNFTCreatedEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawalMade"
  ): TypedContractEvent<
    WithdrawalMadeEvent.InputTuple,
    WithdrawalMadeEvent.OutputTuple,
    WithdrawalMadeEvent.OutputObject
  >;

  filters: {
    "AIAccessGranted(address,uint256,uint256)": TypedContractEvent<
      AIAccessGrantedEvent.InputTuple,
      AIAccessGrantedEvent.OutputTuple,
      AIAccessGrantedEvent.OutputObject
    >;
    AIAccessGranted: TypedContractEvent<
      AIAccessGrantedEvent.InputTuple,
      AIAccessGrantedEvent.OutputTuple,
      AIAccessGrantedEvent.OutputObject
    >;

    "AIAccessPriceUpdated(uint256,uint256,uint256)": TypedContractEvent<
      AIAccessPriceUpdatedEvent.InputTuple,
      AIAccessPriceUpdatedEvent.OutputTuple,
      AIAccessPriceUpdatedEvent.OutputObject
    >;
    AIAccessPriceUpdated: TypedContractEvent<
      AIAccessPriceUpdatedEvent.InputTuple,
      AIAccessPriceUpdatedEvent.OutputTuple,
      AIAccessPriceUpdatedEvent.OutputObject
    >;

    "AIAccessRevoked(address,address,uint256)": TypedContractEvent<
      AIAccessRevokedEvent.InputTuple,
      AIAccessRevokedEvent.OutputTuple,
      AIAccessRevokedEvent.OutputObject
    >;
    AIAccessRevoked: TypedContractEvent<
      AIAccessRevokedEvent.InputTuple,
      AIAccessRevokedEvent.OutputTuple,
      AIAccessRevokedEvent.OutputObject
    >;

    "AccessGranted(address,string,string)": TypedContractEvent<
      AccessGrantedEvent.InputTuple,
      AccessGrantedEvent.OutputTuple,
      AccessGrantedEvent.OutputObject
    >;
    AccessGranted: TypedContractEvent<
      AccessGrantedEvent.InputTuple,
      AccessGrantedEvent.OutputTuple,
      AccessGrantedEvent.OutputObject
    >;

    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "CreatorEarningsWithdrawn(address,string,uint256,uint256)": TypedContractEvent<
      CreatorEarningsWithdrawnEvent.InputTuple,
      CreatorEarningsWithdrawnEvent.OutputTuple,
      CreatorEarningsWithdrawnEvent.OutputObject
    >;
    CreatorEarningsWithdrawn: TypedContractEvent<
      CreatorEarningsWithdrawnEvent.InputTuple,
      CreatorEarningsWithdrawnEvent.OutputTuple,
      CreatorEarningsWithdrawnEvent.OutputObject
    >;

    "NFTMinted(uint256,address,string,uint8,string)": TypedContractEvent<
      NFTMintedEvent.InputTuple,
      NFTMintedEvent.OutputTuple,
      NFTMintedEvent.OutputObject
    >;
    NFTMinted: TypedContractEvent<
      NFTMintedEvent.InputTuple,
      NFTMintedEvent.OutputTuple,
      NFTMintedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RoomActivity(string,string,address,uint256)": TypedContractEvent<
      RoomActivityEvent.InputTuple,
      RoomActivityEvent.OutputTuple,
      RoomActivityEvent.OutputObject
    >;
    RoomActivity: TypedContractEvent<
      RoomActivityEvent.InputTuple,
      RoomActivityEvent.OutputTuple,
      RoomActivityEvent.OutputObject
    >;

    "RoomCreated(string,string,bool,address)": TypedContractEvent<
      RoomCreatedEvent.InputTuple,
      RoomCreatedEvent.OutputTuple,
      RoomCreatedEvent.OutputObject
    >;
    RoomCreated: TypedContractEvent<
      RoomCreatedEvent.InputTuple,
      RoomCreatedEvent.OutputTuple,
      RoomCreatedEvent.OutputObject
    >;

    "RoomJoinPriceUpdated(string,uint256,uint256,address)": TypedContractEvent<
      RoomJoinPriceUpdatedEvent.InputTuple,
      RoomJoinPriceUpdatedEvent.OutputTuple,
      RoomJoinPriceUpdatedEvent.OutputObject
    >;
    RoomJoinPriceUpdated: TypedContractEvent<
      RoomJoinPriceUpdatedEvent.InputTuple,
      RoomJoinPriceUpdatedEvent.OutputTuple,
      RoomJoinPriceUpdatedEvent.OutputObject
    >;

    "RoomJoined(address,string,uint256,uint256)": TypedContractEvent<
      RoomJoinedEvent.InputTuple,
      RoomJoinedEvent.OutputTuple,
      RoomJoinedEvent.OutputObject
    >;
    RoomJoined: TypedContractEvent<
      RoomJoinedEvent.InputTuple,
      RoomJoinedEvent.OutputTuple,
      RoomJoinedEvent.OutputObject
    >;

    "RoomUpdated(string,string,bool,address)": TypedContractEvent<
      RoomUpdatedEvent.InputTuple,
      RoomUpdatedEvent.OutputTuple,
      RoomUpdatedEvent.OutputObject
    >;
    RoomUpdated: TypedContractEvent<
      RoomUpdatedEvent.InputTuple,
      RoomUpdatedEvent.OutputTuple,
      RoomUpdatedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "VideoNFTCreated(uint256,string,string,uint256)": TypedContractEvent<
      VideoNFTCreatedEvent.InputTuple,
      VideoNFTCreatedEvent.OutputTuple,
      VideoNFTCreatedEvent.OutputObject
    >;
    VideoNFTCreated: TypedContractEvent<
      VideoNFTCreatedEvent.InputTuple,
      VideoNFTCreatedEvent.OutputTuple,
      VideoNFTCreatedEvent.OutputObject
    >;

    "VoiceNFTCreated(uint256,string,string,uint256)": TypedContractEvent<
      VoiceNFTCreatedEvent.InputTuple,
      VoiceNFTCreatedEvent.OutputTuple,
      VoiceNFTCreatedEvent.OutputObject
    >;
    VoiceNFTCreated: TypedContractEvent<
      VoiceNFTCreatedEvent.InputTuple,
      VoiceNFTCreatedEvent.OutputTuple,
      VoiceNFTCreatedEvent.OutputObject
    >;

    "WithdrawalMade(address,uint256,uint256)": TypedContractEvent<
      WithdrawalMadeEvent.InputTuple,
      WithdrawalMadeEvent.OutputTuple,
      WithdrawalMadeEvent.OutputObject
    >;
    WithdrawalMade: TypedContractEvent<
      WithdrawalMadeEvent.InputTuple,
      WithdrawalMadeEvent.OutputTuple,
      WithdrawalMadeEvent.OutputObject
    >;
  };
}
